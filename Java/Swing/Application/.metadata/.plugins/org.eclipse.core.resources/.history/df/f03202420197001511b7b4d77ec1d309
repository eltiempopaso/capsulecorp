package Dynatac.Bus;

import java.util.ArrayList;
import java.util.List;

import Dynatac.Bus.IDynatacBus.IDynatacBusListener;


public class DynatacBusBridge extends DynatacBusCommon implements IDynatacBusListener {
	
	/**
	 * 
	 * 
	 *
	 */	
	
	/****************************************
	 *  OBJECT CONSTRUCTION	
	 ****************************************/
	public DynatacBusBridge (boolean busesAreConnected) {
	}
	
	public DynatacBusBridge (boolean busesAreConnected) {
		connectedBuses_ = busesAreConnected;
		/*
		busLeft_  = aBusLeft;
		busRight_ = aBusRight;
		
		busLeftSuscriptor_  = new  DynatacBusBridge_DynatacBusListener(busLeft_,busRight_);
		busRightSuscriptor_ = new  DynatacBusBridge_DynatacBusListener(busRight_,busLeft_);
		
		buses_.add(aBusLeft);
		buses_.add(aBusRight);
		
		busLeft_.installListener(this);
		busRight_.installListener(this);
		*/
	}
	
	/****************************************
	 *  PUBLIC METHODS 						
	 ****************************************/
	public void write(String data) {
		for (int z = 0; z<buses_.size(); z++)
		{
			IDynatacBus b = buses_.get(z);
					
			b.write(data);
		}
	}
	
	public void dataAvailable(String data, IDynatacBus bus) {
		notifyListeners (data);
		
		for (int z = 0; z<buses_.size(); z++)
		{
			IDynatacBus b = buses_.get(z);
			
			if (b != bus) // forward information...
			{		
				b.write(data);
			}
		}
	}
	
	public void addBus (IDynatacBus aBus)
	{
		aBus.installListener(this);
		buses_.add(aBus);
	}
	
	public void removeBus (IDynatacBus aBus)
	{
		aBus.removeListener (this);
		buses_.remove(aBus);
	}
		
	/****************************************
	 *  INTERNAL METHODS 						
	 ****************************************/
	
	/****************************************
	 *  INTERNAL VARS 						
	 ****************************************/	
	private List<IDynatacBus> buses_ = new ArrayList<IDynatacBus>();
	boolean connectedBuses_;
}
	
